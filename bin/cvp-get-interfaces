#!/usr/bin/env python


# -----------------------------------------------------------------------------
# Python standard imports
# -----------------------------------------------------------------------------

import sys
import os
import json
import logging
from collections import defaultdict
from datetime import datetime
import csv
import itertools
from functools import reduce
from string import Template

# -----------------------------------------------------------------------------
# additional package imports
# -----------------------------------------------------------------------------

import yaml
import maya
import click
from alive_progress import alive_bar
from nornir.plugins.tasks.files import write_file
from tabulate import tabulate
from cvppyez.matcher import make_matcher
from cvppyez.nornir import get_inventory

# -----------------------------------------------------------------------------
# CVP PyEZ imports
# -----------------------------------------------------------------------------

from cvppyez.log import setup_log

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !
# !                               CONSTANTS
# !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

PROG_VERSION = '0.3.0'                      # bump on each release

DEFAULT_LOGFILE = "/dev/null"
DEFAULT_LOGLEVEL = 'warning'

LN_SEP = "#" + "-" * 79
TIME_FORMAT = "%Y-%m-%d (%a) %H:%M:%S"
REQ_ENV_VARS = ('CVP_SERVER', 'CVP_USER', 'CVP_PASSWORD')


def nr_get_inventory(ctx, hostnames):
    print_banner(ctx)
    print("Gathering CVP inventory, please wait.")

    def from_hostnames(h):
        return h.name in hostnames and ctx.obj.filter_func(h)

    try:
        nr = get_inventory(filter_func=from_hostnames)

    except RuntimeError as exc:
        sys.exit(str(exc))

    n_devs = len(nr.inventory.hosts)
    if not n_devs:
        print("No devices match hostname filter")
        sys.exit(1)

    ctx.obj.nr = nr
    ctx.obj.n_devs = n_devs


def nr_task_run_interface_commands(task, commands, dev_ifs, progress=None):

    np_dev = task.host.get_connection("napalm", task.nornir.config)
    eos_dev = np_dev.device

    hostname = task.host.name
    if_names = dev_ifs[hostname]

    cmd_outputs = defaultdict(dict)

    for if_name in if_names:

        for cmd_item in commands:

            eos_cmd = cmd_item['command'].substitute(interface=if_name)
            cmd_res = eos_dev.run_commands(
                commands=[eos_cmd],
                encoding=cmd_item['encoding']
            )
            cmd_outputs[if_name][cmd_item['name']] = cmd_res[0]

    task.run(task=write_file, filename=f'{hostname}.json',
             content=json.dumps(cmd_outputs, indent=3))

    if progress:
        progress()


# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !
# !                              Command REPORT BANNER
# !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

def print_banner(ctx):
    print("\n")
    print(LN_SEP)
    nowtime = maya.now().datetime(to_timezone="EST").strftime(TIME_FORMAT)
    print(f"# {ctx.obj.prog_name}, version {PROG_VERSION}")
    print(f"# CVP: {ctx.obj.cvp_user}@{ctx.obj.cvp_server}")
    print(f"# TIME: {nowtime}")

    if ctx.info_name == 'logs':
        print(f'# LOG TIME-FRAME: {ctx.params["last"]}')

    print(LN_SEP)



def print_errors(res):
    print("Execution errors detected on hosts:")
    failed = [[host, h_res.result] for host, h_res in res.items() if h_res.failed]
    print(tabulate(
        headers=['hostname', 'result'],
        tabular_data=failed
    ))


def print_list_devices(nr):
    for host in sorted(nr.inventory.hosts):
        print(host)


# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !
# !                              CLICK Command
# !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# -----------------------------------------------------------------------------
#                             CUSTOMIZE CLICK COMMANDS
# -----------------------------------------------------------------------------

class CLIContext(object):
    pass


class Command(click.Command):
    cli_help = """
This command is used to execute a list of operational commands for a give set 
of host,interfaces, and store the results into JSON files, one per host.  

You must provide two input files:

--inventory <file> is a CSV file that must contain at least two columns,
"host" and "interface".  The first line in the file must contain the column headers.

--commands <file> is a YAML file that contains a list of the commands to execute.  The structure
of this file is a list, that looks like this:

# BEGIN EXAMPLE YAML FILE

---
- name: stats
  command: show interfaces $interface

- name: vlans
  command: show interfaces $interface vlans
  encoding: text

- name: macaddrs
  command: show mac address-table interface $interface

# END EXAMPLE YAML FILE

The 'name' field must be unique and designates the purpose of the command.  This value is also
used when storing the results of the command into the $host JSON output file.

The 'command' is the EOS command to execute with the $interface keyword used to designated
where the actual interface name is to be placed.

The 'encoding' option is used to designate if the command should return JSON data or TEXT output.
The default is JSON.
    """

    cvp_help = """
    You must setup the following environment variables:

        *  CVP_SERVER = hostname of your CVP server
        *  CVP_USER = your login user name
        *  CVP_PASSWORD = your login password

    This program will use CVP to obtain the inventory, filter it based on your
    options, and then scan the EOS devices over the eAPI directly.
    """

    def get_help(self, ctx):
        """ customize the --help output """
        return '\n'.join([
            self.cli_help,
            self.cvp_help,
            super(Command, self).get_help(ctx)
        ])

    def invoke(self, ctx):
        ctx.obj = CLIContext()

        try:
            all(os.environ[ev_name] for ev_name in REQ_ENV_VARS)

        except KeyError as exc:
            raise click.UsageError(
                f'Missing Environment variable: {str(exc)}',
                ctx=ctx
            )

        ctx.obj.prog_name = ctx.info_name
        ctx.obj.cvp_server = os.environ['CVP_SERVER']
        ctx.obj.cvp_user = os.environ['CVP_USER']

        optargs = ctx.params

        log = ctx.obj.log = setup_log(optargs['log'])
        log_level = optargs['log_level']
        log.setLevel(logging.getLevelName(log_level.upper()))

        search_hostname = optargs['hostname']
        if not search_hostname:
            ctx.obj.filter_func = lambda h: True

        else:
            match_hostname = make_matcher(
                name='hostname', value=search_hostname,
                use_regex=optargs['use_regex'])
            ctx.obj.filter_func = lambda h: match_hostname(h.name)

        super(Command, self).invoke(ctx)


# -----------------------------------------------------------------------------
#                           Command options
# -----------------------------------------------------------------------------

opt_use_regex = click.option(
    '-R', '--use-regex',
    help='Use regular expression pattern matching',
    is_flag=True
)

opt_hostname = click.option(
    '--hostname', '-h',
    help='Search devices matching host name; use -R to enable regex',
    metavar="[<glob-pattern>|<regex-pattern>]",
)

opt_log = click.option(
    '--log',
    help='log to file',
    default=DEFAULT_LOGFILE
)

opt_log_level = click.option(
    '--log-level',
    help='logging level',
    type=click.Choice(['debug', 'info', 'warning', 'error', 'critical']),
    default=DEFAULT_LOGLEVEL,
    callback=lambda ctx, param, value: value.upper() if value is not None else None
)


def opts_shared(cmd_func):
    """
    Create a decorator that combines all of the common options (shared) across
    multiple commands. The decorator approach is used by the click framework
    to add options to a give command.  This this function effective "stacks"
    a bunch of options as a single decorator.

    Parameters
    ----------
    cmd_func : function to decorate

    Returns
    -------
    function - cmd_func now stacked with the common options.
    """
    return reduce(
        lambda _f, opt_func: opt_func(_f), [
            opt_hostname, opt_use_regex,
            opt_log, opt_log_level],
        cmd_func)


# -----------------------------------------------------------------------------
#                                 CLICK Command COMMAND
# -----------------------------------------------------------------------------

@click.command(cls=Command)
@click.version_option(PROG_VERSION)
@opts_shared
@click.option(
    'inventory',
    '--inventory', '-i',
    type=click.File(),
    required=True,
    help='CSV file of host,interface'
)
@click.option(
    'commands',
    '--commands', '-c',
    type=click.File(),
    required=True,
    help='YAML file of commands to execute'
)
@click.pass_context
def cli_run_commands(ctx, inventory, commands, **optargs):

    try:
        commands_data = yaml.safe_load(commands)

    except Exception as exc:
        sys.exit(f"Unable to load YAML command file: {str(exc)}")

    # -------------------------------------------------------------------------
    # next, ensure that each of the commands has a $interface designation,
    # convert the command into a Template instance, and ensure there is a
    # command encoding (defaults to json).
    # -------------------------------------------------------------------------

    for cmd_item in commands_data:
        cmd = cmd_item['command']
        if '$interface' not in cmd:
            print(f"ERROR: command missing $interface: '{cmd}'")
            sys.exit(2)

        cmd_item['command'] = Template(cmd)
        if 'encoding' not in cmd_item:
            cmd_item['encoding'] = 'json'

    # -------------------------------------------------------------------------
    # now read the inventory CSV file and create a hash of device hostnames
    # that provide a list of interfaces.  Using that hostname list, as well as
    # the --hostname option obtain the CVP inventory of hosts into a Nornir
    # inventory instance.
    # -------------------------------------------------------------------------

    csv_rd = csv.reader(inventory)
    csv_ds = defaultdict(set)

    _ = next(csv_rd)     # read header line and discard
    for rec in csv_rd:
        csv_ds[rec[0]].add(rec[1])

    nr_get_inventory(ctx, hostnames=list(csv_ds))

    n_devs = ctx.obj.n_devs
    nr = ctx.obj.nr

    proceed = None
    while proceed not in ['Y', 'n']:
        proceed = click.prompt(f"Run commands on {n_devs} devices? [Y/n/l]")
        if proceed == 'l':
            print_list_devices(nr)

    if proceed != 'Y':
        raise click.Abort()

    # use a fancy progress bar to show progress. if you need to debug the task
    # using pdb/breakpoints, do not use this progress bar as it adds background
    # threading and prevents debuggin of tasks.

    with alive_bar(n_devs) as bar:
        res = nr.run(task=nr_task_run_interface_commands,
                     commands=commands_data,
                     dev_ifs=csv_ds,
                     progress=bar)

    if res.failed:
        print_errors(res)

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !
# !                                 MAIN
# !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


def main():
    cli_run_commands()


if __name__ == "__main__":
    main()
